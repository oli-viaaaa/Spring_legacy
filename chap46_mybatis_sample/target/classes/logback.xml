<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" debug="true" scanPeriod="30 seconds">
 
    <!-- usage : https://logback.qos.ch/manual/layouts.html -->
   
   ﻿ <!-- 이 부분에서 로그 저장소(log repo)를 개인 상황에 맞게 설정합니다. -->﻿
    <property name="LOGS_PATH" value="d:/javaworks/log" />
  
    <!-- 
		org.apache.log4j.ConsoleAppender 	콘솔에 로그 메시지 출력 
		org.apache.log4j.FileAppender    	파일에 로그 메시지 기록 
		org.apache.log4j.RollingFileAppender 파일에 로그 메시지 기록 (일정 크기가 되면 로그 파일 변경) 
		org.apache.log4j.DailyRollingFileAppender 파일에 로그 메시지 기록 (하루 단위로 로그 파일 변경) 
		org.apache.log4j.net.SMTPAppender 	로그 메시지를 이메일로 전송 
		org.apache.log4j.DBAppender         로그 메시지를 데이터베이스에 저장
     -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}: --[%thread{10}] [%logger{20}] -- %msg%n </pattern>
        </encoder>
    </appender>
   
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">

<!--    <file>${LOGS_PATH}/labatory.log</file> -->
       
        <append>true</append>
        
        <!--
                %d{yyyy-MM-dd HH:mm:ss} : 년월일 시분초
                %thread : thread name
                %-5level : log level , -5는 출력 고정폭 값
                %logger{length} :Logger name의 이름, {length}는 자리수
                %msg : log message %message은 alias
                %n : 줄바꿈
               
                org.fusesource.jansi:jansi:1.8 가 필요.
                       Linux ,Mac OS X 기본 지원
                       <withJansi>true</withJansi>설정후 사용해야 함
                %highlight : log level별로 color 차별화
                -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] [%logger{36}] - %msg%n</Pattern>
        </encoder>
       
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/labatory_%d{yyyy-MM-dd HH}.%i.txt</fileNamePattern>
            <maxFileSize>3KB</maxFileSize> <!-- 로그 파일당 사이즈 한계 -->
            <maxHistory>30</maxHistory> <!-- 30일 유지 -->
            <totalSizeCap>1GB</totalSizeCap><!-- 1GB 용량 제한 -->
        </rollingPolicy>
       
    </appender>
   
	<logger name="org.springframework" level="info"/>
    
    <logger name="com.javalab.logging">
		<level value="info" />
	</logger> 
 
 
  	<!-- SQL관련 설정 -->
 	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 
 		argument 값으로 대체된 SQL문이 보여진다. -->
	<!-- <logger name="jdbc.sqlonly" level="DEBUG"/>  -->
	<logger name="jdbc.sqlonly" level="OFF" />   
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 
		포함한다. -->
	<logger name="jdbc.sqltiming" level="DEBUG"/>
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 
		생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 
		사용을 권장하지 않는다. -->    
	<logger name="jdbc.audit" level="OFF"/>    
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 
		양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="OFF"/> 
 
    <root level="info">
        <appender-ref ref="CONSOLE"/> <!-- Console에 로그를 출력하고자 할 때 사용 -->
        <appender-ref ref="FILE"/> <!-- File로 로그를 남기고자 할 때 사용 -->
    </root>
 
</configuration>